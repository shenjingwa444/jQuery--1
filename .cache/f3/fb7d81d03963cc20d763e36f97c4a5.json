{"id":"main.js","dependencies":[],"generated":{"js":"// const api = window.jQuery('.test')   //window可省略；\n//const api = jQuery('.test')  //不返回elements，而是返回api对象；\n//api.addClass('red').addClass('blue')    //链式操作\n\n/*\r\nobj.fn(p1)\r\nobj.fn.call(obj,p1)  //函数里的 this 就是 obj ;\r\n*/\n// api.addClass('red').addClass('blue').addClass('green')  //这里的 this 就是 api，所以可直接 return this \n\n/*\r\njQuery('.test') \r\n  .addClass('red')\r\n  .addClass('blue')  //  不用api，直接用函数返回值调用；\r\n*/\n\n/*\r\nconst x = jQuery('.test1').find('.child')\r\nconsole.log(x)  //如果find()返回array,此时 x 是一个纯数组，不能链式操作了；\r\n*/\n//jQuery('.test1').find('.child').addClass('red')  \n//find函数如果返回 this ,red 属性加在了test1上面，而不是child上面，其实是返回前面那个对象\n\n/*jQuery('.test1')\r\n  .find('.child')\r\n  .addClass('red')\r\n  .end()\r\n  .addClass('yellow')\r\n\r\n  jQuery('.test1')\r\n  .find('.child')\r\n  .each(div=>console.log(div))\r\n*/\njQuery('.test2').next().print();"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":21,"column":0},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"name":"jQuery","generated":{"line":34,"column":0},"source":"main.js","original":{"line":36,"column":2}},{"generated":{"line":34,"column":6},"source":"main.js","original":{"line":36,"column":8}},{"generated":{"line":34,"column":7},"source":"main.js","original":{"line":36,"column":9}},{"generated":{"line":34,"column":15},"source":"main.js","original":{"line":36,"column":8}},{"generated":{"line":34,"column":16},"source":"main.js","original":{"line":36,"column":2}},{"name":"next","generated":{"line":34,"column":17},"source":"main.js","original":{"line":36,"column":19}},{"generated":{"line":34,"column":21},"source":"main.js","original":{"line":36,"column":2}},{"name":"print","generated":{"line":34,"column":24},"source":"main.js","original":{"line":36,"column":26}},{"generated":{"line":34,"column":29},"source":"main.js","original":{"line":36,"column":2}}],"sources":{"main.js":"// const api = window.jQuery('.test')   //window可省略；\r\n//const api = jQuery('.test')  //不返回elements，而是返回api对象；\r\n//api.addClass('red').addClass('blue')    //链式操作\r\n\r\n/*\r\nobj.fn(p1)\r\nobj.fn.call(obj,p1)  //函数里的 this 就是 obj ;\r\n*/\r\n\r\n// api.addClass('red').addClass('blue').addClass('green')  //这里的 this 就是 api，所以可直接 return this \r\n\r\n/*\r\njQuery('.test') \r\n  .addClass('red')\r\n  .addClass('blue')  //  不用api，直接用函数返回值调用；\r\n*/\r\n\r\n/*\r\nconst x = jQuery('.test1').find('.child')\r\nconsole.log(x)  //如果find()返回array,此时 x 是一个纯数组，不能链式操作了；\r\n*/\r\n\r\n//jQuery('.test1').find('.child').addClass('red')  \r\n//find函数如果返回 this ,red 属性加在了test1上面，而不是child上面，其实是返回前面那个对象\r\n\r\n/*jQuery('.test1')\r\n  .find('.child')\r\n  .addClass('red')\r\n  .end()\r\n  .addClass('yellow')\r\n\r\n  jQuery('.test1')\r\n  .find('.child')\r\n  .each(div=>console.log(div))\r\n*/\r\n  jQuery('.test2').next().print()"},"lineCount":null}},"error":null,"hash":"1d4d74295b1a1b1b84677a2860eb9d2c","cacheData":{"env":{}}}