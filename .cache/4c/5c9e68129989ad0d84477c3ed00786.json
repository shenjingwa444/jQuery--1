{"id":"main.js","dependencies":[],"generated":{"js":"// const api = window.jQuery('.test')   //window可省略；\n//const api = jQuery('.test')  //不返回elements，而是返回api对象；\n//api.addClass('red').addClass('blue')    //链式操作\n\n/*\r\nobj.fn(p1)\r\nobj.fn.call(obj,p1)  //函数里的 this 就是 obj ;\r\n*/\n// api.addClass('red').addClass('blue').addClass('green')  //这里的 this 就是 api，所以可直接 return this \n\n/*\r\njQuery('.test') \r\n  .addClass('red')\r\n  .addClass('blue')  //  不用api，直接用函数返回值调用；\r\n*/\n\n/*\r\nconst x = jQuery('.test1').find('.child')\r\nconsole.log(x)  //如果find()返回array,此时 x 是一个纯数组，不能链式操作了；\r\n*/\n//jQuery('.test1').find('.child').addClass('red')  \n//find函数如果返回 this ,red 属性加在了test1上面，而不是child上面，其实是返回前面那个对象\n\n/*jQuery('.test1')\r\n  .find('.child')\r\n  .addClass('red')\r\n  .end()\r\n  .addClass('yellow')\r\n\r\n  jQuery('.test1')\r\n  .find('.child')\r\n  .each(div=>console.log(div))\r\n*/\n//怎么在几个相同class属性值的父节点中，返回想要找的子节点的index值\njQuery('.test3>.child').parent().prev().index(); //.print()  \n//.index()\n//let arr1 = jQuery('#test').parent().next()\n//console.log(arr1)\n\njQuery('#child').parent().prev().index(); //这是class = class 的div\n//这是id = test 的div\n//   let arr2 = jQuery('#child').parent().next()\n//console.log(arr2)\n//console.log(dom.next(dom.parent(dom.find('#test')[0])))\n//let arr3 = jQuery('.test2')\n//console.log(arr3)\n//console.log(jQuery('#test').index())"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":21,"column":0},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"generated":{"line":34,"column":0},"source":"main.js","original":{"line":37,"column":0}},{"name":"jQuery","generated":{"line":35,"column":0},"source":"main.js","original":{"line":38,"column":1}},{"generated":{"line":35,"column":6},"source":"main.js","original":{"line":38,"column":7}},{"generated":{"line":35,"column":7},"source":"main.js","original":{"line":38,"column":8}},{"generated":{"line":35,"column":22},"source":"main.js","original":{"line":38,"column":7}},{"generated":{"line":35,"column":23},"source":"main.js","original":{"line":38,"column":1}},{"name":"parent","generated":{"line":35,"column":24},"source":"main.js","original":{"line":38,"column":25}},{"generated":{"line":35,"column":30},"source":"main.js","original":{"line":38,"column":1}},{"name":"prev","generated":{"line":35,"column":33},"source":"main.js","original":{"line":38,"column":34}},{"generated":{"line":35,"column":37},"source":"main.js","original":{"line":38,"column":1}},{"name":"index","generated":{"line":35,"column":40},"source":"main.js","original":{"line":38,"column":41}},{"generated":{"line":35,"column":45},"source":"main.js","original":{"line":38,"column":1}},{"generated":{"line":35,"column":49},"source":"main.js","original":{"line":39,"column":2}},{"generated":{"line":36,"column":0},"source":"main.js","original":{"line":40,"column":2}},{"generated":{"line":37,"column":0},"source":"main.js","original":{"line":41,"column":2}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":42,"column":2}},{"name":"jQuery","generated":{"line":40,"column":0},"source":"main.js","original":{"line":45,"column":0}},{"generated":{"line":40,"column":6},"source":"main.js","original":{"line":45,"column":6}},{"generated":{"line":40,"column":7},"source":"main.js","original":{"line":45,"column":7}},{"generated":{"line":40,"column":15},"source":"main.js","original":{"line":45,"column":6}},{"generated":{"line":40,"column":16},"source":"main.js","original":{"line":45,"column":0}},{"name":"parent","generated":{"line":40,"column":17},"source":"main.js","original":{"line":45,"column":17}},{"generated":{"line":40,"column":23},"source":"main.js","original":{"line":45,"column":0}},{"name":"prev","generated":{"line":40,"column":26},"source":"main.js","original":{"line":46,"column":1}},{"generated":{"line":40,"column":30},"source":"main.js","original":{"line":45,"column":0}},{"name":"index","generated":{"line":40,"column":33},"source":"main.js","original":{"line":47,"column":1}},{"generated":{"line":40,"column":38},"source":"main.js","original":{"line":45,"column":0}},{"generated":{"line":40,"column":42},"source":"main.js","original":{"line":48,"column":3}},{"generated":{"line":41,"column":0},"source":"main.js","original":{"line":49,"column":4}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":43,"column":0},"source":"main.js","original":{"line":51,"column":2}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":54,"column":1}},{"generated":{"line":45,"column":0},"source":"main.js","original":{"line":55,"column":0}},{"generated":{"line":46,"column":0},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":47,"column":0},"source":"main.js","original":{"line":57,"column":0}}],"sources":{"main.js":"// const api = window.jQuery('.test')   //window可省略；\r\n//const api = jQuery('.test')  //不返回elements，而是返回api对象；\r\n//api.addClass('red').addClass('blue')    //链式操作\r\n\r\n/*\r\nobj.fn(p1)\r\nobj.fn.call(obj,p1)  //函数里的 this 就是 obj ;\r\n*/\r\n\r\n// api.addClass('red').addClass('blue').addClass('green')  //这里的 this 就是 api，所以可直接 return this \r\n\r\n/*\r\njQuery('.test') \r\n  .addClass('red')\r\n  .addClass('blue')  //  不用api，直接用函数返回值调用；\r\n*/\r\n\r\n/*\r\nconst x = jQuery('.test1').find('.child')\r\nconsole.log(x)  //如果find()返回array,此时 x 是一个纯数组，不能链式操作了；\r\n*/\r\n\r\n//jQuery('.test1').find('.child').addClass('red')  \r\n//find函数如果返回 this ,red 属性加在了test1上面，而不是child上面，其实是返回前面那个对象\r\n\r\n/*jQuery('.test1')\r\n  .find('.child')\r\n  .addClass('red')\r\n  .end()\r\n  .addClass('yellow')\r\n\r\n  jQuery('.test1')\r\n  .find('.child')\r\n  .each(div=>console.log(div))\r\n*/\r\n\r\n//怎么在几个相同class属性值的父节点中，返回想要找的子节点的index值\r\n jQuery('.test3>.child').parent().prev().index()\r\n  //.print()  \r\n  //.index()\r\n  //let arr1 = jQuery('#test').parent().next()\r\n  //console.log(arr1)\r\n\r\n\r\njQuery('#child').parent()\r\n.prev()\r\n.index()\r\n   //这是class = class 的div\r\n    //这是id = test 的div\r\n//   let arr2 = jQuery('#child').parent().next()\r\n  //console.log(arr2)\r\n\r\n\r\n //console.log(dom.next(dom.parent(dom.find('#test')[0])))\r\n//let arr3 = jQuery('.test2')\r\n//console.log(arr3)\r\n//console.log(jQuery('#test').index())"},"lineCount":null}},"error":null,"hash":"f3174a3d497dfe59bc5fa6cc2df69e35","cacheData":{"env":{}}}